// GRID CONFIG
@col-padding: (@grid-gutter-size * 0.5);
@row-margin: -(@col-padding);

// ----- GRID MIXINS ----- //
#grid {
  .column() {
    padding: 0 @col-padding;
    margin: 0 0 @grid-gutter-size;
  }

  .colSpan (@n) {
    @basis: (@n * @grid-column-unit);
    flex: 0 0 @basis;
    max-width: @basis;
  }

  .colOffset (@n) {
    margin-left: (@n * @grid-column-unit) !important;
  }
}

// hxCol-{N}-xs
// hxCol-{N}
.make-grid-columns (@prefix, @n) when (@n > 0) and (@prefix = xs) {
  .hxCol-@{n}-@{prefix},
  .hxCol-@{n} {
    #grid.colSpan(@n);
  }
  .make-grid-columns(@prefix, (@n - 1));
}
// hxCol-{N}-{breakpoint}
.make-grid-columns (@prefix, @n) when (@n > 0) and not (@prefix = xs) {
  .hxCol-@{n}-@{prefix} {
    #grid.colSpan(@n);
  }
  .make-grid-columns(@prefix, (@n - 1));
}

// hxOffset-{N}-xs
// hxOffset-{N}
.make-grid-offsets (@prefix, @n) when (@n >= 0) and (@prefix = xs) {
  .hxOffset-@{n}-@{prefix},
  .hxOffset-@{n} {
    #grid.colOffset(@n);
  }
  .make-grid-offsets(@prefix, (@n - 1));
}
// hxOffset-{N}-{breakpoint}
.make-grid-offsets (@prefix, @n) when (@n >= 0) and not (@prefix = xs) {
  .hxOffset-@{n}-@{prefix} {
    #grid.colOffset(@n);
  }
  .make-grid-offsets(@prefix, (@n - 1));
}

// hxOrder-{N}-xs
// hxOrder-{N}
.make-grid-orders (@prefix, @n) when (@n > 0) and (@prefix = xs) {
  .hxOrder-@{n}-@{prefix},
  .hxOrder-@{n} {
    order: @n;
  }
  .make-grid-orders(@prefix, (@n - 1));
}
// hxOrder-{N}-{breakpoint}
.make-grid-orders (@prefix, @n) when (@n > 0) and not (@prefix = xs) {
  .hxOrder-@{n}-@{prefix} {
    order: @n;
  }
  .make-grid-orders(@prefix, (@n - 1));
}

.make-grid (@prefix) {
  // 1 to N
  .make-grid-columns(@prefix, @grid-column-count);
  // 0 to N
  .make-grid-offsets(@prefix, @grid-column-count);
  // 1 to N
  .make-grid-orders(@prefix, @grid-column-count);
}
//end:mixins

// ===== GRID ===== //
@col-padding: (@grid-gutter-size * 0.5);
@row-margin: -(@col-padding);

.hxCol {
  display: flex;
  flex-direction: column;
  flex-grow: 1;
}

.hxRow {
  border: 0;
  display: flex;
  flex-wrap: wrap;
  margin: 0 @row-margin -(@grid-gutter-size);
  padding: 0;

  & + & {
    margin-top: @grid-gutter-size;
  }

  & > .hxCol {
    #grid.column();
  }

  &:only-child {
    flex-grow: 1;
  }

  &.hxGutterless {
    margin: 0;

    & > .hxRow + .hxRow {
      margin-top: 0;
    }

    & > .hxCol {
      margin: 0;
      padding: 0;
    }
  }//.hxGutterless
}//.hxRow

@media (min-width: @grid-break-wrist) {
  .make-grid(xs);
}
@media (min-width: @grid-break-palm) {
  .make-grid(sm);
}
@media (min-width: @grid-break-lap) {
  .make-grid(md);
}
@media (min-width: @grid-break-desk) {
  .make-grid(lg);
}
@media (min-width: @grid-break-wall) {
  .make-grid(xl);
}
//end:GRID
